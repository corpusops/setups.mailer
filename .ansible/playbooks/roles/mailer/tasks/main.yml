---
- file:
    state: directory
    mode: "2751"
    path: "{{item}}"
  with_items:
  - "{{cops_mailer_dir}}"
- name: Synchronise files inside the environment (deleguation)
  delegate_to: "localhost"
  synchronize:
    compress: false
    ssh_args: "{{cops_mailer_sshargs}}"
    src: "{{cops_mailer_code_dir}}"
    dest: "{{cops_mailer_dir}}/"
    rsync_opts: "{{cops_mailer_code_rsync_opts}}"
    set_remote_user: "no"
    #update_opts: '--recursive'
- template:
    src: "docker-compose-prod-overrides.yml"
    dest: "{{cops_mailer_dir}}/docker-compose-prod-overrides.yml"
    mode: "0640"
    trim_blocks: false
- template:
    src: ".env"
    dest: "{{cops_mailer_dir}}/.env"
    mode: "0640"
    trim_blocks: false
- template:
    src: "docker.env"
    dest: "{{cops_mailer_dir}}/docker.env"
    mode: "0640"
    trim_blocks: false

- name: Create directories
  file:
    path: "{{cops_mailer_dir}}/overrides/{{ item.path }}"
    state: directory
    mode: '{{ item.mode }}'
  with_filetree: "{{playbook_dir}}/../../overrides/"
  when: item.state == 'directory'
- name: Template files
  template:
    src: '{{ item.src }}'
    dest: "{{cops_mailer_dir}}/overrides/{{ item.path }}"
    mode: '{{ item.mode }}'
    trim_blocks: false
  with_filetree: "{{playbook_dir}}/../../overrides/"
  when: item.state == 'file'

- include_tasks: docker_login.yml
  with_items: "{{cops_mailer_registries}}"
- shell: |
    set -ex
    cd "{{cops_mailer_dir}}"
    {{cops_mailer_dc}} build {{cops_mailer_build_args}}
  when:
  - "cops_mailer_build|copsf_asbool"
  - "cops_mailer_build_args|copsf_asbool"
# ensure all images are (re) pulled
- shell: |
    set -ex
    cd "{{cops_mailer_dir}}"
    {{cops_mailer_dc}} pull
  retries: 5
  delay: 10
  when:
  - "cops_mailer_pull|copsf_asbool"
  tags: [service]
- include_role: {name: corpusops.roles/docker_compose_service}
  vars:
    _docker_compose_service:
      working_directory: "{{cops_mailer_dir}}"
      files: "{{cops_mailer_compose_files}}"
      project: "{{cops_mailer_composename}}"
      restart: "on-failure"
  tags: [service]
# ensure manually handled services are booted
# to handle sidekar volumes refresh accuratly
- shell: |
    set -ex
    cd "{{cops_mailer_dir}}"
    {% for i in cops_mailer_restarted_services.split() %}
    ret=
    for i in $(seq 30);do
      if ( {{cops_mailer_dc}} ps --services \
           --filter status=running | egrep -q "^{{i}}$");then
        {{cops_mailer_dc}} up -d --no-deps --remove-orphans --force-recreate {{i}}
        ret=$?
      else
        {{cops_mailer_dc}} up -d --no-deps --remove-orphans {{i}}
      fi
      if [ "x$ret" = "x0" ];then break;fi
      sleep 1
    done
    if [ "x$ret" != "x0" ];then echo "{{i}}: failed restart";exit 1;fi
    {% endfor %}
    {{cops_mailer_dc}} up -d --no-deps --remove-orphans --force-recreate {{cops_mailer_restarted_services2}}
  tags: [restart]
- shell: |
    set -ex
    cd "{{cops_mailer_dir}}"
    {% for i in cops_mailer_restarted_services.split()|reverse %}
    {{cops_mailer_dc}} ps --services --filter status=running | egrep -q "^{{i}}$"
    {% endfor %}
  retries: 60
  delay: 1
  register: restarted_docker_services
  until: "restarted_docker_services.rc == 0"
  tags: [restart]
